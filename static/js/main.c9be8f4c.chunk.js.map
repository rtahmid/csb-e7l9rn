{"version":3,"sources":["translation/index.js","Solution/Solution.js","Card/Card.js","Input/Input.js","App/App.js","App/index.js","serviceWorker.js","index.js"],"names":["translate","lang","key","en","ar","TranslationContext","createContext","undefined","useTranslation","context","useContext","Error","Solution","_ref","results","t","react_default","a","createElement","className","dir","map","r","concat","name","type","share","toFraction","fr","mul","valueOf","toFixed","length","Card","children","Input","heirs","dispatch","isWide","useMedia","handleCountChange","heir","count","heirNames","Object","keys","twoColumnHeirNames","zip","slice","src_Card_Card","_ref2","i","_ref3","slicedToArray","name1","name2","Input_InputRows","onCountChange","InputRows","_ref4","Fragment","value","onChange","evt","parseInt","target","maxCount","range","end","toConsumableArray","Array","b","e","Modal","setAppElement","App","_useHeirInput","useHeirInput","_useHeirInput2","useMemo","calculate","_useState","useState","_useState2","solutionModalIsOpen","setSolutionModalIsOpen","src_Input_Input","dist_default","onClick","textLabel","react_modal_lib_default","isOpen","overlayClassName","onRequestClose","src_Solution_Solution","react_button_dist_default","unelevated","initialState","defaultHeirs","useReducer","state","action","objectSpread","defineProperty","wife","husband","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","_ref$lang","Provider","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c9be8f4c.chunk.js","sourcesContent":["//@ts-check\nimport React, { createContext, useContext } from 'react'\n\nimport en from './translation-en.json'\nimport ar from './translation-ar.json'\n\nconst translate = lang => key => lang === 'en' ? en[key] : ar[key]\n\nconst TranslationContext = createContext(undefined)\n\nexport const TranslationProvider = ({ children, lang = 'en' }) => {\n  return (\n    <TranslationContext.Provider value={translate(lang)}>\n      {children}\n    </TranslationContext.Provider>\n  )\n}\n\nexport const useTranslation = () => {\n  const context = useContext(TranslationContext)\n  if(context === undefined) {\n    throw Error('useTranslation must be used within a TranslationProvider')\n  }\n  return context\n}\n","import React from 'react'\n\nimport { useTranslation } from '../translation'\n\nimport './Solution.css'\n\nconst toPercentage = fr => {\n  return fr.mul(100).valueOf()\n}\n\nconst Solution = ({ results }) => { \n  const t = useTranslation()\n\n  return (\n    <div className=\"Solution\" dir={t('lang') === 'ar' ? 'rtl' : 'ltr'}>\n      <p className=\"Solution-header\">{t('solution')}</p>\n      <table>\n        <thead>\n          <tr>\n            <th>{t('heir_type')}</th>\n            <th>{t('share_type')}</th>\n            <th>{t('share_fraction')}</th>\n            <th>{t('share_percentage')}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {results.map(r => (\n            <tr key={`${r.name}-${r.type}`}>\n              <td>{t(r.name)}</td>\n              <td>{t(r.type)}</td>\n              <td>{r.share.toFraction()}</td>\n              <td>{toPercentage(r.share).toFixed(2)}%</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {!results.length && <p>{t('no_heir_selected')}</p>}\n    </div>\n  )\n }\n\n export default Solution","import React from 'react'\nimport './Card.css'\n\nconst Card = ({ children, className }) => (\n  <div className={`Card ${className}`}>{children}</div>\n)\n\nexport default Card","import React from 'react'\nimport Card from '../Card/Card'\nimport useMedia from 'react-use/lib/useMedia'\n\nimport { useTranslation } from '../translation'\n\nimport './Input.css'\n\nconst Input = ({ heirs, dispatch }) => { \n  const t = useTranslation()\n  const isWide = useMedia('(min-width: 780px)')\n  const handleCountChange = (heir, count) => {\n    dispatch({ type: 'change_count', heir, count })\n  }\n  const heirNames = Object.keys(heirs)\n  const twoColumnHeirNames = zip(\n    heirNames.slice(0, heirNames.length/2),\n    heirNames.slice((heirNames.length/2))\n  )\n\n  return (\n    <Card className=\"Input\">\n      {isWide ? (\n        <table>\n          <thead>\n            <tr>\n              <th>{t('heir_type')}</th>\n              <th>{t('heir_count')}</th>\n              <th>{t('heir_type')}</th>\n              <th>{t('heir_count')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {twoColumnHeirNames.map(([name1, name2], i) =>\n              <tr key={i}>\n                <InputRows name={name1} heirs={heirs} onCountChange={handleCountChange} />\n                <InputRows name={name2} heirs={heirs} onCountChange={handleCountChange} />\n              </tr>\n            )}\n          </tbody>\n        </table>\n      ) : (\n        <table>\n          <thead>\n            <tr>\n              <th>{t('heir_type')}</th>\n              <th>{t('heir_count')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {heirNames.map((name, i) =>\n              <tr key={i}>\n                <InputRows name={name} heirs={heirs} onCountChange={handleCountChange} />\n              </tr>\n            )}\n          </tbody>\n        </table>\n\n      )}\n    </Card>\n  )\n }\n\nexport default Input\n\nconst InputRows = ({ name, heirs, onCountChange }) => { \n  const t = useTranslation()\n\n  return ( \n    <>\n      <td>{t(name)}</td>\n      <td>\n        <select\n          value={heirs[name]}\n          onChange={evt => onCountChange(name, parseInt(evt.target.value))}\n        >\n          {\n            maxCount(name) > 1 ? (\n              range(maxCount(name) + 1).map((count, i) => <option key={i}>{count}</option>)\n            ) : (\n                <>\n                  <option value=\"0\">{t('no')}</option>\n                  <option value=\"1\">{t('yes')}</option>\n                </>\n              )\n          }\n        </select>\n      </td>\n    </>\n  )\n}\n\nconst range = end => [...Array(end).keys()]\n\nconst zip = (a, b) => a.map((e, i) => [e, b[i]])\n\nconst maxCount = heir => {\n  switch(heir) {\n    case 'father':\n    case 'mother':\n    case 'husband':\n      return 1\n    case 'wife':\n      return 4\n    default:\n      return 20\n  }\n}\n","//@ts-check\nimport React, { useState, useReducer, useMemo } from 'react';\nimport Solution from '../Solution/Solution'\nimport Input from '../Input/Input'\nimport { defaultHeirs, calculate } from '@hu-bcs1/islamic-inheritance-calculator'\n\nimport Fab from '@material/react-fab'\nimport Button from '@material/react-button'\nimport Modal from 'react-modal'\n\n// import T from '../translation-en.json'\nimport { useTranslation } from '../translation'\n\nimport '@material/react-button/dist/button.css'\nimport '@material/react-fab/dist/fab.css'\nimport './App.css';\nimport './Modal.css';\n\nModal.setAppElement('#root')\n\nconst App = () => {\n  const t = useTranslation()\n  const [heirs, dispatch] = useHeirInput()\n  const results = useMemo(() => calculate(heirs), [heirs])\n  const [solutionModalIsOpen, setSolutionModalIsOpen] = useState(false)\n\n  const closeAndReset = () => {\n    dispatch({ type: 'reset' })\n    setSolutionModalIsOpen(false)\n  }\n\n  return (\n    <>\n      <header className=\"App-header\">\n        <p className=\"App-name\">{t('title')}</p>\n      </header>\n      <main className=\"App-main\" dir={t('lang') === 'ar' ? 'rtl' : 'ltr'}>\n        <Input heirs={heirs} dispatch={dispatch} />\n        <Fab\n          onClick={() => setSolutionModalIsOpen(true)}\n          className=\"App-calculate-button\"\n          textLabel={t('calculate')}\n        />\n        <Modal\n          isOpen={solutionModalIsOpen}\n          className=\"App-modal\"\n          overlayClassName=\"App-overlay\"\n          onRequestClose={() => setSolutionModalIsOpen(false)}\n        >\n          <Solution results={results} />\n          <Button\n            unelevated\n            className=\"App-close-modal-button\"\n            onClick={closeAndReset}>\n            {t('close')}\n          </Button>\n        </Modal>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n\nconst useHeirInput = () => {\n  const initialState = defaultHeirs\n  const reducer = (state, action) => {\n    switch(action.type) {\n      case 'change_count':\n        if(action.count > 0) {\n          if(action.heir === 'husband') {\n            return { ...state, wife: 0, [action.heir]: action.count }\n          }\n          if(action.heir === 'wife') {\n            return { ...state, husband: 0, [action.heir]: action.count }\n          }\n        }\n        return { ...state, [action.heir]: action.count }\n      case 'reset':\n        return initialState\n      default:\n        throw Error('unknown action type')\n    }\n  }\n  return useReducer(reducer, initialState)\n}","import App from './App'\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { TranslationProvider } from './translation'\n\n//TODO: read lang from url params\nReactDOM.render(\n  <TranslationProvider lang='ar'>\n    <App />\n  </TranslationProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}